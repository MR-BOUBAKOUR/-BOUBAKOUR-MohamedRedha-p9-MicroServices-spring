server:
  port: 8071
# ⚠️ in prod — https
#  ssl:
#    enabled: true
#    key-store: classpath:keystore.p12
#    key-store-password: ${KEY_STORE_PASSWORD}
#    key-store-type: PKCS12
#    key-alias: spring

spring:
  application:
    name: gatewayserver
  r2dbc:
    url: ${POSTGRES_GATEWAY_URL}
    username: ${POSTGRES_GATEWAY_USER}
    password: ${POSTGRES_GATEWAY_PASSWORD}
  # Enable the gateway to forward the trafic to the right ms
  cloud:
    gateway:
      discovery:
        locator:
          enabled: false
          # Activate the lowerCase for the URIs ( -> upperCase: false)
          lowerCaseServiceId: true
      httpclient:
        connect-timeout: 30000
        response-timeout: 30s

  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${OAUTH2_GOOGLE_CLIENT_ID}
            client-secret: ${OAUTH2_GOOGLE_CLIENT_SECRET}
            scope:
              - openid
              - email
              - profile
            redirect-uri: "{baseUrl}/login/oauth2/code/{registrationId}"
            authorization-grant-type: authorization_code
            client-name: Google
        provider:
          google:
            issuer-uri: https://accounts.google.com
            user-info-uri: https://www.googleapis.com/oauth2/v3/userinfo
            user-name-attribute: sub

# ⚠️ In prod, need to be in https
cors:
  frontend-success-url: http://localhost:5173/oauth2/success
  frontend-error-url: http://localhost:5173/login

management:
  endpoints:
    web:
      exposure:
        include: "*"
  endpoint:
    gateway:
      access: unrestricted
  info:
    env:
      enabled: true
  # Used to identify which metrics belong to which microservice
  metrics:
    tags:
      application: ${spring.application.name}
    # Enable histogram buckets for http.server.requests (required for histogram_quantile in Prometheus/Grafana)
    distribution:
      percentiles-histogram:
        http.server.requests: true
  observations:
    http:
      server:
        requests:
          name: http.server.requests

eureka:
  client:
    registerWithEureka: true
    fetchRegistry: true
    serviceUrl:
      defaultZone: http://localhost:8070/eureka/
  instance:
    preferIpAddress: true

info:
  app:
    name: gatewayserver

logging:
  level:
    feign: INFO
    com:
      MedilaboSolutions:
        gateway: INFO
  pattern:
    level: "%5p [${spring.application.name},%X{trace_id},%X{span_id}]"

jwt:
  secretKey: ${JWT_SECRET_KEY}
  accessTokenExpirationMs: 900000        # 15 minutes
  refreshTokenExpirationMs: 604800000    # 7 days